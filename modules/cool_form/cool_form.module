<?php
//$Id$

/**
 * implements hook_menu 
 */

function cool_form_menu(){
    $items = array();
    $items['fully-themed-form'] = array(
        'title' => 'Nicely themed',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cool_form_page_form'),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    
    return $items;
}


/**
 * 
 * implements hook_theme
 * 
 */
function cool_form_theme(){
    return array(
        'cool_form_page_form' => array(
            'render element' => 'form',
            'template' => 'cool_form_page',
        ),
    );
};

/**
 *
 * @param array $form
 * @param array $form_state
 * @return array form 
 */

function cool_form_page_form($form, $form_state) {
    $form = array();
    
    $form['just_field'] = array(
        '#type'=>'textfield',
        '#title' => t('Just texfield'),
        '#default_value' => 'Just text',
    );
    
    $form['submit'] = array(
        '#type'=>'submit',
        '#value' => 'Become cool',
    );
    
    return $form;
}

function cool_form_page_form_submit(&$form, &$form_state) {
    drupal_set_message(t("You'e entered text for warning: <em>@text</em>", array('@text'=>$form_state['values']['just_field'])), 'warning');
}

function template_preprocess_cool_form_page_form(&$variables){
    $variables['page_form_content'] = array();
    $cool_form_hiden = array();
    foreach (element_children($variables['form']) as $key) {
        $type = $variables['form'][$key]['#type'];
        if($type == 'hidden' || $type == 'token') {
            $cool_form_hiden[] = drupal_render($variables['form'][$key]);
        }
        else {
            $variables['page_form_content'][$key] = drupal_render($variables['form'][$key]);
        }
    }
    $variables['page_form_content']['hidden'] = implode("",$cool_form_hiden);
    $variables['cool_form'] = implode("",$variables['page_form_content']);
    //dsm($variables);
    
}

function cool_form_node_delete($node){
    $node = (array)$node;
    //watchdog("test", "Nothing worked");
    $result = drupal_mail('cool_form', 'notify', 'janis.janovskis@gmail.com', language_default(), $node, 'janis.janovskis@gmail.com', TRUE);
    if($result['result'] == TRUE){
        dsm($result);
        watchdog('del', "test message sent");
    }
    else{
        drupal_set_message('Sorrry email broge down');
        watchdog("test", "Nothing worked");
    }
}

function cool_form_mail($key, $message, $params){
    switch ($key){
        case 'notify':
            $message['subject'] = t('Node of type @type has is deleted', array('@type'=>$params['type']));
            $message['body'][] = t('Node is gone of id @id', array('@id'=>$params['nid']));
            break;
    }
}


function cool_form_file_url_alter(&$uri){
    //dsm($uri);
}

function cool_form_html_head_alter(&$head_elements) {
    //dsm($head_elements);
}

function cool_form_process_html(&$variables){
    //dsm($variables);
    $variables['page_bottom'] .= cool_form_get_js('footer');
    $variables['scripts'] = cool_form_get_js();
}

function cool_form_get_js($scope = 'header', $javascript = NULL, $skip_alter = FALSE) {
  if (!isset($javascript)) {
    $javascript = drupal_add_js();
  }
  if (empty($javascript)) {
    return '';
  }
  // Allow modules to alter the JavaScript.
  if (!$skip_alter) {
    drupal_alter('js', $javascript);
  }

  // Filter out elements of the given scope.
  $items = array();
  foreach ($javascript as $key => $item) {
    if ($item['scope'] == $scope) {
      $items[$key] = $item;
    }
  }

  $output = '';
  // The index counter is used to keep aggregated and non-aggregated files in
  // order by weight.
  $index = 1;
  $processed = array();
  $files = array();
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));

  // A dummy query-string is added to filenames, to gain control over
  // browser-caching. The string changes on every update or full cache
  // flush, forcing browsers to load a new copy of the files, as the
  // URL changed. Files that should not be cached (see drupal_add_js())
  // get REQUEST_TIME as query-string instead, to enforce reload on every
  // page request.
  $default_query_string = variable_get('css_js_query_string', '0');

  // For inline JavaScript to validate as XHTML, all JavaScript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";

  // Since JavaScript may look for arguments in the URL and act on them, some
  // third-party code might require the use of a different query string.
  $js_version_string = variable_get('drupal_js_version_query_string', 'v=');

  // Sort the JavaScript so that it appears in the correct order.
  uasort($items, 'drupal_sort_css_js');

  // Provide the page with information about the individual JavaScript files
  // used, information not otherwise available when aggregation is enabled.
  $setting['ajaxPageState']['js'] = array_fill_keys(array_keys($items), 1);
  unset($setting['ajaxPageState']['js']['settings']);
  drupal_add_js($setting, 'setting');

  // If we're outputting the header scope, then this might be the final time
  // that drupal_get_js() is running, so add the setting to this output as well
  // as to the drupal_add_js() cache. If $items['settings'] doesn't exist, it's
  // because drupal_get_js() was intentionally passed a $javascript argument
  // stripped off settings, potentially in order to override how settings get
  // output, so in this case, do not add the setting to this output.
  if ($scope == 'header' && isset($items['settings'])) {
    $items['settings']['data'][] = $setting;
  }

  // Loop through the JavaScript to construct the rendered output.
  $element = array(
    '#tag' => 'script',
    '#value' => '',
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  foreach ($items as $item) {
    $query_string =  empty($item['version']) ? $default_query_string : $js_version_string . $item['version'];

    switch ($item['type']) {
      case 'setting':
        $js_element = $element;
        $js_element['#value_prefix'] = $embed_prefix;
        $js_element['#value'] = 'jQuery.extend(Drupal.settings, ' . drupal_json_encode(drupal_array_merge_deep_array($item['data'])) . ");";
        $js_element['#value_suffix'] = $embed_suffix;
        $output .= theme('html_tag', array('element' => $js_element));
        break;

      case 'inline':
        $js_element = $element;
        if ($item['defer']) {
          $js_element['#attributes']['defer'] = 'defer';
        }
        $js_element['#value_prefix'] = $embed_prefix;
        $js_element['#value'] = $item['data'];
        $js_element['#value_suffix'] = $embed_suffix;
        $processed[$index++] = theme('html_tag', array('element' => $js_element));
        break;

      case 'file':
        $js_element = $element;
        if (!$item['preprocess'] || !$preprocess_js) {
          if ($item['defer']) {
            $js_element['#attributes']['defer'] = 'defer';
          }
          $query_string_separator = (strpos($item['data'], '?') !== FALSE) ? '&' : '?';
          $js_element['#attributes']['src'] = file_create_url($item['data']) . $query_string_separator . ($item['cache'] ? $query_string : REQUEST_TIME);
          $processed[$index++] = theme('html_tag', array('element' => $js_element));
        }
        else {
          // By increasing the index for each aggregated file, we maintain
          // the relative ordering of JS by weight. We also set the key such
          // that groups are split by items sharing the same 'group' value and
          // 'every_page' flag. While this potentially results in more aggregate
          // files, it helps make each one more reusable across a site visit,
          // leading to better front-end performance of a website as a whole.
          // See drupal_add_js() for details.
          $key = 'aggregate_' . $item['group'] . '_' . $item['every_page'] . '_' . $index;
          $processed[$key] = '';
          $files[$key][$item['data']] = $item;
        }
        break;

      case 'external':
        $js_element = $element;
        // Preprocessing for external JavaScript files is ignored.
        if ($item['defer']) {
          $js_element['#attributes']['defer'] = 'defer';
        }
        $js_element['#attributes']['src'] = $item['data'];
        $processed[$index++] = theme('html_tag', array('element' => $js_element));
        break;
    }
  }

  // Aggregate any remaining JS files that haven't already been output.
  if ($preprocess_js && count($files) > 0) {
    foreach ($files as $key => $file_set) {
      $uri = cool_form_build_js_cache($file_set);
      // Only include the file if was written successfully. Errors are logged
      // using watchdog.
      if ($uri) {
        $preprocess_file = file_create_url($uri);
        $js_element = $element;
        $js_element['#attributes']['src'] = $preprocess_file;
        $processed[$key] = theme('html_tag', array('element' => $js_element));
      }
    }
  }

  // Keep the order of JS files consistent as some are preprocessed and others are not.
  // Make sure any inline or JS setting variables appear last after libraries have loaded.
  return implode('', $processed) . $output;
}

function cool_form_build_js_cache($files) {
  $contents = '';
  $uri = '';
  $map = variable_get('drupal_js_cache_files', array());
  // Create a new array so that only the file names are used to create the hash.
  // This prevents new aggregates from being created unnecessarily.
  $js_data = array();
  foreach ($files as $file) {
    $js_data[] = $file['data'];
  }
  $key = hash('sha256', serialize($js_data));
  if (isset($map[$key])) {
    $uri = $map[$key];
  }

  if (empty($uri) || !file_exists($uri)) {
    // Build aggregate JS file.
    foreach ($files as $path => $info) {
      if ($info['preprocess']) {
        // Append a ';' and a newline after each JS file to prevent them from running together.
        $contents .= file_get_contents($path) . ";\n";
      }
    }
    // Prefix filename to prevent blocking by firewalls which reject files
    // starting with "ad*".
    $filename = 'js_' . drupal_hash_base64($contents) . '.js';
    // Create the js/ within the files folder
    $def = variable_get('file_default_scheme', "public");
    //$jspath = ($bucket = variable_get('amazons3_bucket', FALSE)) ? $def.'://'.$bucket.'js' : $def.'://js';
    $jspath = $def.'://js';  
    $uri = $jspath . '/' . $filename;
    // Create the JS file.
    file_prepare_directory($jspath, FILE_CREATE_DIRECTORY);
    if (!file_exists($uri) && !file_unmanaged_save_data($contents, $uri, FILE_EXISTS_REPLACE)) {
      return FALSE;
    }
    drupal_set_message(t("Called :@func", array("@func"=>__FUNCTION__)));
    // If JS gzip compression is enabled, clean URLs are enabled (which means
    // that rewrite rules are working) and the zlib extension is available then
    // create a gzipped version of this file. This file is served conditionally
    // to browsers that accept gzip using .htaccess rules.
    if (variable_get('js_gzip_compression', TRUE) && variable_get('clean_url', 0) && extension_loaded('zlib')) {
      if (!file_exists($uri . '.gz') && !file_unmanaged_save_data(gzencode($contents, 9, FORCE_GZIP), $uri . '.gz', FILE_EXISTS_REPLACE)) {
        return FALSE;
      }
    }
    $map[$key] = $uri;
    variable_set('drupal_js_cache_files', $map);
  }
  return $uri;
}

